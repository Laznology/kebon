generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?   @unique
  emailVerified     DateTime?    
  image             String?
  password          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  isDeleted         Boolean   @default(false)
  pages             Page[]
  accounts          Account[]
  sessions          Session[]

  @@index([isDeleted])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  published   Boolean       @default(false)
  image       String?
  content     Json?
  excerpt     String?      
  tags        String[]      @default([])
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  isDeleted   Boolean       @default(false)
  author      User          @relation(fields: [authorId], references: [id])
  pageVersion PageVersion[]

  @@index([isDeleted, authorId, title])
  @@index([published, isDeleted])
  @@index([slug])
}

model PageVersion {
  id        String    @id @default(cuid())
  content   Json?
  pageId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  isDeleted Boolean   @default(false)
  page      Page      @relation(fields: [pageId], references: [id])

  @@index([pageId, isDeleted])
}

model AppSettings {
  id            Int     @id @default(autoincrement())
  allowRegister Boolean @default(true)
  allowedEmails String? @default("")
  appName       String  @default("Kebon")
  appLogo       String  @default("/logo.webp")
  siteIcon      String  @default("/favicon.ico")
}


